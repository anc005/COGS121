<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <script src="sweetalert-master/dist/sweetalert.min.js"></script>
  <link rel="stylesheet" type="text/css" href="/sweetalert-master/dist/sweetalert.css">
	<link rel="stylesheet" type="text/css" href="/CSS/dd.css" />
	<link rel="stylesheet" type="text/css" href="/CSS/map.css">
  <link rel="stylesheet" type="text/css" href="/CSS/login_signup.css">



    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="/js/jquery.js"></script>
    <script src="/js/require.js"></script>
    <script type="text/javascript" src="//code.jquery.com/jquery-1.4.2.js"></script>

    <script src="/js/jquery-1.3.2.min.js" type="text/javascript"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js" type="text/javascript"></script>
	<title>Map View</title>
</head>

<body>
  <ul id="navbar">
    <li><a id="mc" href="/"><b>MapChat</b></a></li>
	<a href="javascript:logout()" class="logout"><i class="fa fa-power-off" aria-hidden="true"></i></a>
  </ul>

 <main>

   <tab-section id="lost-tab-section" class="active">
   		<div id="map-outer">
        	<img id="map-loading" src="img/loading.svg" />
            <div id="map"></div>
   		</div>
   </tab-section>

   <tab-section id="found-tab-section">
   	   <form id="found-form">
             <label>Mood: </label>
            <br>
              <label>
                <input id="funny" type="radio" name="webmenu" value="med" onclick="getName(this.id)" checked/>
                <img src="icons/funny.png">
              </label>
              <label>
                <input id="meh" type="radio" name="webmenu" value="med" onclick="getName(this.id)"/>
                <img src="icons/meh.png">
              </label>
              <label>
                <input id="sad" type="radio" name="webmenu" value="med" onclick="getName(this.id)"/>
                <img src="icons/sad.png">
              </label>
              <label>
                <input id="angry" type="radio" name="webmenu" value="med" onclick="getName(this.id)"/>
                <img src="icons/angry.png">
              </label>
              <label>
                <input id="sinister" type="radio" name="webmenu" value="med" onclick="getName(this.id)"/>
                <img src="icons/sinister.png">
              </label>

             <br><br>
            <label>Status: </label>
            <textarea id="found-description" placeholder="How are you feeling?"></textarea>
			<h3>*Each new post lasts 24 hours.</h3>
			<h3>*Limit of 1 immediate post per user.</h3>
            <button class="addValue" type="submit">POST</button>
			<h3 style="text-align:center">Please wait a few seconds after clicking the 'POST' button.</h3>
       </form>
   </tab-section>

   <tab-section id="profile-tab-section">
   <!--
      <form name="profileSub" onsubmit="addJSON(event);">
        <div class="profileContainer">
          <label><b>First Name</b></label><br>
          <input type="text" id="fname" required>
          <br><br>
          <label><b>Last Name</b></label><br>
          <input type="text" id="lname" required>
          <br><br>
        </div>
        <button type="submit">Save Changes</button>
      </form>
	-->
	  <form id="found-form" action="javascript:updateProfile()">
        <div class="profileContainer">
          <label><b>Username:</b></label><br>
          <input type="text" id="uname" required>
          <br><br>
          <label><b>About Me (optional):</b></label><br>
          <textarea id="uabout"></textarea>
          <br><br>
        </div>
        <button type="submit">Save Changes</button>
      </form>
	    <form id="found-form2" action="javascript:deleteAccount()">
          <button type="submit">Delete Account</button>
       </form>
    </tab-section>

	<tab-section id="post-tab-section">
	  <div class="realComment">
        <a id="username">Name: No Post Selected.</a>:<br>
  	    <a id="postDesc">Description: No Post Selected.</a><br>
  	    <i><a id="postTime">Time: No Post Selected.</a></i><br>
      </div>
      <ul id="commentList" style="position:fixed; height:60%; width:50%; left:25%; overflow: auto">
	    <li><a>Welcome to MapChat!</a></li>
		<li><a>Please select a post from the Map!</a></li>
	  </ul>
      <br>
	  <form id="commentBox" action="javascript:addComment(inText.value)" >
        <input type="text" id="inText" required>
        <input type="submit" value="Comment" id="commentSubmission">
      </form>
      <footer class="btn-group" >
        <a href="javascript:goHome()"><tab id="close">Close</tab></a>
      </footer>
	  </tab-section>

  </main>
  <footer class="btn-group" id="footer">
            <tab id="lost-tab" class="active">Map</tab>
		    <tab id="post-tab" style="display:none">Chat</tab>
            <tab id="found-tab">Create Post</tab>
            <tab id="profile-tab" onclick="javascript:populateProfile()">Account Settings</tab>
  </footer>

<script src="https://www.gstatic.com/firebasejs/4.0.0/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyCBhEOwCcoCumMv4rem4VvcymsJajE3kgI",
    authDomain: "peeradvisor-165319.firebaseapp.com",
    databaseURL: "https://peeradvisor-165319.firebaseio.com",
    projectId: "peeradvisor-165319",
    storageBucket: "peeradvisor-165319.appspot.com",
    messagingSenderId: "1073760765111"
  };
  firebase.initializeApp(config);

  // Get a reference to the database service
  var database = firebase.database();
  const dbRefPosts = database.ref().child("posts");

  //On page load, check if a user is logged in
  if (sessionStorage.user) {
    console.log(sessionStorage.user);
  }
  else {
    alert("Error: Must login to access this page.");
    window.location.href="/login";
  }

  //On page load/refresh, set postSelect to null
  sessionStorage.removeItem("postSelect");

 /* var myObj, myJSON, text, obj;
  if (obj == null) {
    myObj = {
      "first":"",
      "last":"",
      "occupation":"",
      "hobby":""
    };
    myJSON = JSON.stringify(myObj);
    localStorage.setItem("profile", myJSON);

    text = localStorage.getItem("profile");
    obj = JSON.parse(text);
  }
  function addJSON(event) {
    event.preventDefault();

    myObj = {
      "first":document.getElementById("fname").value,
      "last":document.getElementById("lname").value
    };
    myJSON = JSON.stringify(myObj);
    localStorage.setItem("profile", myJSON);

    text = localStorage.getItem("profile");
    obj = JSON.parse(text);

    alert("Information saved!");
  } */

  //Function to go to the Map Tab from the Post's Comments Tab
  function goHome() {
    $('#lost-tab').click();
	footer.style.visibility = "visible";
  }

  //Logout function
  function logout() {
    sessionStorage.removeItem("user");
	sessionStorage.removeItem("postSelect");
    firebase.auth().signOut();
    window.location.href = "/login";
  }

  function deleteAccount() { 
	swal({
      title: "Are you sure you want to delete your account?",
      text: "This process is irreversible.",
      type: "warning",
      showCancelButton: true,
      confirmButtonColor: "#DD6B55",
      confirmButtonText: "Yes, delete it!",
      closeOnConfirm: false
    },
    function(){
	  var user = firebase.auth().currentUser;
      user.delete().then(function() {
        // User deleted.
        database.ref('users/' + sessionStorage.user + '/').remove(function(error){
      });
        sessionStorage.clear();
		swal({
		  title: "Deleted!",
		  text: "Thank you for using MapChat",
		  type: "success"
		},
		function(){  
          window.location.href = '/login';
		});
      }, function(error) {
          alert(error);
      });
    });
  }

  function postComments(userkey) {
    footer.style.visibility = "hidden";

	console.log("Post Comments: " + userkey);
	database.ref('users/' + sessionStorage.postSelect + '/postComments').off();
    //Clear data from post comments page
	while (commentList.hasChildNodes()) {
	  commentList.removeChild(commentList.firstChild);
	}
	
	if (typeof(Storage) !== "undefined") {
	  window.sessionStorage.setItem("postSelect", userkey);
	}
	else {
	  Alert("This web application's features is not supported on your browser");
	}
	//Display post metadata
	database.ref('users/' + userkey + '/').once('value' , snapshot1 => {
	  username.text = snapshot1.val().username;
	});
	database.ref('users/' + userkey + '/post/').once('value', snapshot2 => {
	  var minuteFormat;
	  var amORpm;
	  if(snapshot2.val().minute < 10) {
	    minuteFormat = '0' + snapshot2.val().minute;
	  }
	  else {
	    minuteFormat = snapshot2.val().minute;
	  }
	  if(snapshot2.val().hour > 12) {
	    amORpm = 'pm';
	  }
	  else {
	    amORpm = 'am';
	  }
	  var timestamp = snapshot2.val().month + '/' + snapshot2.val().date + '/' + snapshot2.val().year + ' ' + (snapshot2.val().hour % 12)
	                  + ':' + minuteFormat + ' ' + amORpm;

	  postDesc.text = "\"" + snapshot2.val().description + "\"";
	  postTime.text = timestamp;

	  //Create comments header
	  const aElem = document.createElement('a');
	  const liElem = document.createElement('li');
	  aElem.innerText = "- Chat began " + timestamp + " -";
	  aElem.style.color = "black";
	  liElem.appendChild(aElem);
	  commentList.appendChild(liElem);
	});

    //Load all previous comments and if anyone adds a new comments, create new element for newest comment
    database.ref('users/' + userkey + '/postComments/').on('child_added', function(snapshot3, prevChild) {
	    const newA = document.createElement('a');
	    const li = document.createElement('li');
	    newA.innerText = '[' + snapshot3.val().timestamp + '] ' + snapshot3.val().user + ': ' + snapshot3.val().message;
        li.appendChild(newA);
		li.style.wordWrap = "break-word";
	    commentList.appendChild(li);
    });
  }
    
  function addComment(msg) {
    console.log("Selected post key: " + sessionStorage.postSelect);

	if(sessionStorage.postSelect != undefined) {
    //Get the nextM value of selected post
    database.ref('users/' + sessionStorage.postSelect + '/nextM' ).once('value', snapshot1 => {
	  //Get username information from current logged in user
	  database.ref('users/' + sessionStorage.user + '/').once('value', snapshot2 => {
	    //Create mX, where X = valueOf(nextM)
	    database.ref('users/' + sessionStorage.postSelect + '/postComments' + '/m' + snapshot1.val()).set({
	      user: snapshot2.val().username,
		  message: msg,
		  timestamp: moment().format('h:mm A')
	    });
	  });

	  //Increment nextM
	  database.ref('users/' + sessionStorage.postSelect + '/').update({
	    nextM: snapshot1.val() + 1
	  });
	});
	//Clear comment field
	inText.value = "";
	}
	else {
	  alert("Error: Select a post first to add a comment.");
	}
  }

  var name = 'funny';

  function getName(emojiPic) {
    name = emojiPic;
  }

  function toggle() {
/*    var x = document.getElementsByClassName("myDIV");

    for(var i = 0; i<x.length; i++){
      if (x[i].style.display === 'none') {
          x[i].style.display = 'block';
      } 
      else {
          x[i].style.display = 'none';
      }
    } */
  }

  function createPost() {
    var currentTime = moment().format('MMMM Do [at] h:mm a');
	database.ref('users/' + sessionStorage.user +'/post/').once('value', function(snapshot1) {
	  console.log(snapshot1);
	  if(snapshot1.exists() != false) {
	    swal({
		  title: "Warning!",
		  text: "Creating a new post will overwrite your existing post. Proceed?",
		  type: "warning",
		  showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, overwrite it!",
          closeOnConfirm: false
        },
		function() {
		  if (navigator.geolocation) {
		    navigator.geolocation.getCurrentPosition(function(position) {

            //Setup comments for this post
	        database.ref('users/' + sessionStorage.user + '/').update({
	          nextM: 1
	        });
			database.ref('users/' + sessionStorage.user + '/postComments').set({
			});

            database.ref('users/' + sessionStorage.user + '/post').set({
		      image: name,
		      description: $("#found-description").val(),
		      latitude: position.coords.latitude,
		      longitude: position.coords.longitude,
			  month: (moment().month() + 1),
			  date: moment().date(),
			  year: moment().year(),
			  hour: moment().hours(),
			  minute: moment().minute() 
            });
			swal({
	          title: "Post Overwritten!",
		      text: "Thank you.", 
		      type: "success"
	        },
	        function(){
	          window.location.href="/";
	        });
	      }, function() {
	        alert("Error: Post Not Created");
		    window.location.href="/";
            handleLocationError(true, infoWindow, map.getCenter());
          });
          } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
          }
	    });
	  }
	  else {
	    if (navigator.geolocation) {
		  navigator.geolocation.getCurrentPosition(function(position) {

          //Setup comments for this post
	      database.ref('users/' + sessionStorage.user + '/').update({
	        nextM: 1
	      });

          database.ref('users/' + sessionStorage.user + '/post').set({
		    image: name,
		    description: $("#found-description").val(),
		    latitude: position.coords.latitude,
		    longitude: position.coords.longitude,
			month: (moment().month() + 1),
			date: moment().date(),
			year: moment().year(),
			hour: moment().hours(),
	        minute: moment().minute() 
          });

	      swal({
	        title: "Post Created!",
		    text: "Thank you.", 
		    type: "success"
	      },
	      function(){
	        window.location.href="/";
	      });
	      }, function() {
	        alert("Error: Post Not Created");
		    window.location.href="/";
            handleLocationError(true, infoWindow, map.getCenter());
          });
          } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
          } 
	  }
	});
  }

  	function postEmoji() {
        var name, description;
        if ((description = $("#found-description").val()) == "") {
            alert("Please add a description.");
        }
		else {
		  createPost();
        }
    }

	function populateProfile() {
	  database.ref('users/' + sessionStorage.user + '/').once('value', function(snapshot1) {
	    uname.value = snapshot1.val().username;
		uabout.value = snapshot1.val().about;
	  });
	}
	function updateProfile() {
	  database.ref('users/' + sessionStorage.user + '/').update ({
	    username: uname.value,
	    about: uabout.value
	  });
	  swal("Profile Updated!", "Thank you.", "success")
	}

	var map, infoWindow;
    function initMap() {
	  $("#map-loading").fadeOut();

      map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 32.87699, lng: -117.2365},
		zoom: 16
      });
	  infoWindow = new google.maps.InfoWindow({content:'<p class="hook">I Am Here</p>'});
      // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

			//Create marker for self location
            var marker = new google.maps.Marker({
              position: pos,
              map: map,
			  animation: google.maps.Animation.DROP,
			  icon: {
			    path: google.maps.SymbolPath.CIRCLE,
				scale: 10
			   }
            });

			//Display all posts on the map on Page Load (static; will not change in real time)
	        database.ref('users/').once('value', function(snap) {

	          var infoWin = new google.maps.InfoWindow();
			  //Create markerclusterer object with an empty array of markers
			  var markerCluster = new MarkerClusterer(map, [], {imagePath: 'markercluster/m'});

	          snap.forEach(function(childsnap1) {
	            if(childsnap1.val().post != null) {
		          database.ref('users/' + childsnap1.key + '/post').once('value', function(childsnap2) {
								    
					var beforeTime = moment();
					beforeTime.set('month', moment().month());
					beforeTime.set('date', moment().date());
					beforeTime.set('year', moment().year());
					beforeTime.set('hour', moment().hour());
					beforeTime.set('minute', moment().minute());
					beforeTime.subtract(1, 'days');

					var postTime = moment();
					postTime.set('month', (childsnap2.val().month - 1));
					postTime.set('date', childsnap2.val().date);
					postTime.set('year', childsnap2.val().year);
					postTime.set('hour', childsnap2.val().hour);
					postTime.set('minute', childsnap2.val().minute);

					//Check post to see if it has passed the elapsed time
					if(postTime.isAfter(beforeTime) == false) {
					  database.ref('users/' + childsnap1.key + '/post/').remove();
					  database.ref('users/' + childsnap1.key + '/postComments/').remove();
					  database.ref('users/' + childsnap1.key + '/nextM/') .remove();
					}
					else {

		            var marker = new google.maps.Marker({
		              position: new google.maps.LatLng(childsnap2.val().latitude, childsnap2.val().longitude),
		   	          icon: 'icons/' + childsnap2.val().image + '.png',
		              map: map
		            });

					var ampm;
					var minFormat;
					if(childsnap2.val().hour > 12) {
					  ampm = 'pm';
					}
					else {
					  ampm = 'am';
					}
					if(childsnap2.val().minute < 10) {
					  minFormat = '0' + childsnap2.val().minute;
					}
					else {
					  minFormat = childsnap2.val().minute;
					}
			
		   	        marker.addListener('click', function() {
			          infoWin.setContent( '<div class="dHeader">' + childsnap1.val().username + '</div>' +
				         '<div class="description">"' + childsnap2.val().description + '"</div>' +
						 '<br>About Me: ' +
						 childsnap1.val().about +
				         '<br><center><div class="myDIV" style="display:none"></div><a class="comButton" href="javascript:postComments(\'' + childsnap1.key + '\')" onclick="$(\'#post-tab\').click()"><i class="fa fa-comments fa-3x"></i></a></center>' +
					     '<a>'+ childsnap2.val().month + '/' + childsnap2.val().date + '/' + childsnap2.val().year + ' ' + 
                         (childsnap2.val().hour % 12) + ':' + minFormat + ' ' + ampm + '</a>'
				      );
		              infoWin.open(map, marker);
			        });

					//Add marker into markerCluster array
					markerCluster.addMarker(marker);
					}
		          });
		        }
	          });
	        });

            infoWindow.setPosition(pos);
            infoWindow.open(map);
            map.setCenter(pos);

        }, function() {
          handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }
    }

	  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
	    infoWindow.setPosition(pos);
		infoWindow.setContent(browserHasGeolocation ?
		                      'Error: The Geolocation service failed.' :
							  'Error: Your browser doesn\'t support geolocation.');
		infoWindow.open(map);
	  }
     
  </script>
  <script src="js/index.js"></script>
  <script src="markercluster/markercluster.js"></script>
  <script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAW3DCA-XeamOExWb8IlYw0YZnre1UvZww&callback=initMap">
  </script>
  <script src="https://cdn.firebase.com/js/client/2.2.3/firebase.js"></script>
</body>
</html>
